#!/usr/bin/env python3

import pathlib
import sys
import typing as ty
from argparse import (
    ArgumentParser,
    ArgumentDefaultsHelpFormatter,
    SUPPRESS)


def parse_args():
    default_py = sys.executable

    # see https://peps.python.org/pep-0405/#specification
    default_isvenv: bool = sys.prefix != sys.base_prefix
    parser = ArgumentParser(
        formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument(
        '--antlr4-jar', type=str,
        help='antlr4 jar location',
        default=SUPPRESS,
        required=True
    )
    parser.add_argument(
        '--python3-exec', type=str,
        help='python3 file location',
        default=default_py
    )
    parser.add_argument(
        '--is-venv', type=bool,
        help='is virtualenv or not. If not, check from specified python',
        default=default_isvenv
    )
    return parser.parse_args()


def lowercase_bool(value: bool) -> str:
    return 'true' if value else 'false'


def main():
    args = parse_args()
    antlr4_path = pathlib.Path(args.antlr4_jar)
    python3_path = pathlib.Path(args.python3_exec)

    if not antlr4_path.is_file():
        raise RuntimeWarning('ANTLR4 jar not found')
    if not python3_path.is_file():
        raise RuntimeWarning('Python3 path not found')

    properties: dict[str, ty.Callable[[], str]] = {
        'antlr4.jar': lambda: str(antlr4_path).replace('\\', '\\\\'),
        'python3.exec': lambda: str(python3_path).replace('\\', '\\\\'),
        'python3.isvenv': lambda: lowercase_bool(args.is_venv)
    }
    with open('build.local.properties', 'w', encoding='utf-8') as prop_file:
        prop_file.write(
            '# generated by configure.py. Do not edit manually\n')
        for k, prop_function in properties.items():
            prop_file.write(f'{k}={prop_function()}')
            prop_file.write('\n')
    return 0


if __name__ == '__main__':
    sys.exit(main() or 0)
